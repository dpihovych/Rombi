from aiogram import types, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import ADMINS, BOT_TOKEN
from aiogram.filters import Command
from aiogram.filters.text import Text
from aiogram import Router
import config

router = Router()
bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")


@router.message(Command(commands=["me"]))
async def me_rp_cmd(message: types.Message):
    rp = message.text
    rp = rp[4:]
    await message.answer(f"{message.from_user.full_name} " + rp)


@router.message(Text(text=["–¥–∞—Ç–∏ –ø'—è—Ç—å", "–î–∞—Ç–∏ –ø'—è—Ç—å", "–î–∞—Ç–∏ –ü'—è—Ç—å", "–î–ê–¢–ò –ü'–Ø–¢–¨"]))
async def give_five(message: types.Message):
    await message.answer(f"{message.from_user.full_name} –¥–∞–≤ –ø'—è—Ç—å {message.reply_to_message.from_user.full_name}")


@router.message(Text(text=["–í–∏—Å—Ç—Ä—ñ–ª–∏—Ç–∏", "–≤–∏—Å—Ç—Ä—ñ–ª–∏—Ç–∏", "–í–ò–°–¢–†–Ü–õ–ò–¢–ò"]))
async def vstriluv(message: types.Message):
    if message.reply_to_message.from_user.id not in config.ADMINS:
        await message.answer(
            f"{message.from_user.full_name} –≤–∏—Å—Ç—Ä—ñ–ª–∏–≤ –≤ {message.reply_to_message.from_user.full_name}")

    if message.reply_to_message.from_user.id in config.ADMINS:
        await message.answer(f"–í –º–æ—ó—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –≤–∏—Å—Ç—Ä—ñ–ª–∏—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞!")
        await bot.send_message(message.reply_to_message.from_user.id,
                               f"–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞, –º–∏ –∑ –£–∫—Ä–∞—ó–Ω–∏! {message.reply_to_message.from_user.full_name}, –±—É–ª–∞ —Å–ø—Ä–æ–±–∞ –≤–∏—Å—Ç—Ä—ñ–ª–∏—Ç–∏ –≤ –í–∞—Å, –∞–ª–µ —è –Ω–µ –¥–∞–≤ —Ü—å–æ–º—É —Å—Ç–∞—Ç–∏—Å—èüôÇ\n\n–ö–æ–Ω—Ç–∞–∫—Ç–∏ –∑—Ä–∞–¥–Ω–∏–∫–∞:\n–•—Ç–æ: {message.from_user.full_name}\nUsername: {message.from_user.username}\nID: {message.from_user.id}")
        await bot.send_message(message.reply_to_message.from_user.id,
                               f"–•–æ—á–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ {message.from_user.full_name}?")
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è—è", callback_data=f"1:{message.from_user.id}"))
        await bot.send_message(message.reply_to_message.from_user.id, f"–û–±–µ—Ä—ñ—Ç—å", reply_markup=builder.as_markup())


@router.callback_query((Text(startswith="1")))
async def user_id_inline_callback1(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split(':')[1]
    await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ! –°–∫–æ—Ä–æ –Ω–µ–≥—ñ–¥–Ω–∏–∫ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è", True)
    await bot.send_message(user_id, f"–ó –í–∞–º–∏ —Ö–æ—á—É—Ç—å –∑–≤'—è–∑–∞—Ç–∏—Å—è")


@router.callback_query((Text(startswith="2")))
async def user_id_inline_callback2(callback_query: types.CallbackQuery):
    await callback_query.answer("–í–∏ –ø–æ–∂–∞–ª—ñ–ª–∏ –Ω–µ–≥—ñ–¥–Ω–∏–∫–∞", True)


@router.message(Text(text=["–ú–æ–∂–Ω–∞", "–º–æ–∂–Ω–∞", "–ú–û–ñ–ù–ê"]))
async def mojna(message: types.Message):
    await message.answer(f"–©–∞ —è–∫ –¥–∞–º –ø–µ–Ω–¥–∏–∫–∞! –ú–æ–≤—á–∏!")

@router.message(Text(text=["—Ö—Ç–æ —Å–∫–∞–∑–∞–≤?", "–•—Ç–æ —Å–∫–∞–∑–∞–≤?", "–•–¢–û –°–ö–ê–ó–ê–í?", "—Ö—Ç–æ —Å–∫–∞–∑–∞–≤", "–•—Ç–æ —Å–∫–∞–∑–∞–≤", "–•–¢–û –°–ö–ê–ó–ê–í"]))
async def hto_skzzav(message: types.Message):
    await message.answer(f"–Ø! –©–∞ —è–∫ –¥–∞–º –ø–µ–Ω–¥–∏–∫–∞! –ú–æ–≤—á–∏!")

@router.message(Text(text=["—Ç–≤–∞—é –¥—ñ–≤—ñ–∑—ñ—é", "–¢–≤–∞—é –¥—ñ–≤—ñ–∑—ñ—é", "–¢–í–ê–Æ –î–Ü–í–Ü–ó–Ü–Æ", "—Ç–≤–∞—é –¥—ñ–≤—ñ–∑—ñ—é!", "–¢–≤–∞—é –¥—ñ–≤—ñ–∑—ñ—é!", "–¢–í–ê–Æ –î–Ü–í–Ü–ó–Ü–Æ!", "—Ç–≤–æ—é –¥—ñ–≤—ñ–∑—ñ—é", "–¢–≤–æ—é –¥—ñ–≤—ñ–∑—ñ—é", "–¢–í–û–Æ –î–Ü–í–Ü–ó–Ü–Æ", "—Ç–≤–æ—é –¥—ñ–≤—ñ–∑—ñ—é!", "–¢–≤–æ—é –¥—ñ–≤—ñ–∑—ñ—é!", "–¢–í–û–Æ –î–Ü–í–Ü–ó–Ü–Æ!"]))
async def diviziu(message: types.Message):
    await message.answer(f"–ù–µ –º–æ—é, –∞ —Ç–≤–æ—é –¥—ñ–≤—ñ–∑—ñ—é!")


@router.message(Text(text=["–î–∞—Ç–∏ –ø–µ–Ω–¥–∏–∫–∞", "–¥–∞—Ç–∏ –ø–µ–Ω–¥–∏–∫–∞", "–î–ê–¢–ò –ü–ï–ù–î–ò–ö–ê"]))
async def penduk(message: types.Message):
    if message.reply_to_message.from_user.id not in config.ADMINS:
        await message.answer(
            f"{message.from_user.full_name} –¥–∞–≤ –ø–µ–Ω–¥–∏–∫–∞ {message.reply_to_message.from_user.full_name}")

    if message.reply_to_message.from_user.id in config.ADMINS:
        await message.answer(f"–ú–æ—ó–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–∞—Ç–∏ –ø–µ–Ω–¥–∏–∫–∞ –Ω–µ –º–æ–∂–Ω–∞!")
        await bot.send_message(message.reply_to_message.from_user.id,
                               f"–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞, –º–∏ –∑ –£–∫—Ä–∞—ó–Ω–∏! {message.reply_to_message.from_user.full_name}, –±—É–ª–∞ —Å–ø—Ä–æ–±–∞ –í–∞–º –¥–∞—Ç–∏ –ø–µ–Ω–¥–∏–∫–∞, –∞–ª–µ —è –Ω–µ –¥–∞–≤ —Ü—å–æ–º—É —Å—Ç–∞—Ç–∏—Å—èüôÇ\n\n–ö–æ–Ω—Ç–∞–∫—Ç–∏ –∑—Ä–∞–¥–Ω–∏–∫–∞:\n –•—Ç–æ: {message.from_user.full_name}\nUsername: {message.from_user.full_name}\nID: {message.from_user.id}")
        await bot.send_message(message.reply_to_message.from_user.id,
                               f"–•–æ—á–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ {message.from_user.full_name}?")
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚úÖ–¢–∞–∫, —Ö–æ—á—É", callback_data=f"1:{message.from_user.id}"))
        builder.add(types.InlineKeyboardButton(text="üö´–ù—ñ, –Ω–µ —Ö–æ—á—É", callback_data=f"2:{message.from_user.id}"))
        await bot.send_message(message.reply_to_message.from_user.id, f"–û–±–µ—Ä—ñ—Ç—å", reply_markup=builder.as_markup())


@router.callback_query((Text(startswith="1")))
async def user_id_inline_callback1(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split(':')[1]
    await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ! –°–∫–æ—Ä–æ –Ω–µ–≥—ñ–¥–Ω–∏–∫ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è", True)
    await bot.send_message(user_id, f"–ó –í–∞–º–∏ —Ö–æ—á—É—Ç—å –∑–≤'—è–∑–∞—Ç–∏—Å—è")


@router.callback_query((Text(startswith="2")))
async def user_id_inline_callback2(callback_query: types.CallbackQuery):
    await callback_query.answer("–í–∏ –ø–æ–∂–∞–ª—ñ–ª–∏ –Ω–µ–≥—ñ–¥–Ω–∏–∫–∞", True)
