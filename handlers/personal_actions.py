import re
from datetime import datetime

import pytz
from aiogram import Router, Bot, F, types
import tzlocal
import string
import random
from aiogram.filters import Command
import config
from config import BOT_TOKEN
from typing import Any, Dict
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
import sqlite3 as sq

router = Router()
bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")


class Signup(StatesGroup):
    name = State()
    age = State()
    email = State()


base = sq.connect("Rombi.db")
cur = base.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE,
                username TEXT,
                full_name TEXT,
                name TEXT,
                age TEXT,
                email TEXT,
                date DATETIME
            )""")


def is_valid_email(email):
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(email_regex, email) is not None


@router.message(Command("start"))
async def start(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        # =
        # print("successfully added ", message.from_user.id, message.from_user.username, message.from_user.full_name)

        await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç! üëã\n"
                             "–Ü —è –ø–æ–±–∞—á–∏–≤, —â–æ —Ç–µ–±–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö ‚òπÔ∏è\n"
                             "—Ç–æ–º—É —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—à–∏—Ö –º–æ—ó—Ö –∫–æ–º–∞–Ω–¥–∏, –Ω–∞–ø–∏—à–∏ - /signup")
    else:
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç! üëã\n"
                             "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏ - /help üìã\n"
                             "–í –º–µ–Ω—ñ –∑'—è–≤–∏–ª–æ—Å—è –Ω–µ–≤–µ–ª–∏—á–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è! –Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —â–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è –Ω–∞–ø–∏—à–∏ - /renewal")


# help
@router.message(Command("help"))
async def help(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        await message.answer(
            "‚ùå –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ Rombi —ñ —Ç–æ–¥—ñ —Ç–æ–±—ñ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞! –©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–∞—Ç–∏—Å—è, –Ω–∞–ø–∏—à–∏ /signup")
    else:
        await message.answer(
            "<b>–ú–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏:</b>\n\n"
            "<b>–ö–æ–º–∞–Ω–¥–∏ —è–∫—ñ —è –≤–º—ñ—é –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏, –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n"
            "/start - –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–±–æ—Ç–∞\n"
            "/help - –º–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏\n"
            "/info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
            "/password - –≥–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–∞—Ä–æ–ª—å, –¥–æ–≤–∂–∏–Ω–∞ –º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
            "<b>–ö–æ–º–∞–Ω–¥–∏ —è–∫—ñ —è –≤–º—ñ—é –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏, –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:</b>\n"
            "–°–∫–æ—Ä–æ –∑'—è–≤–∏—Ç—å—Å—è"
        )


# password
@router.message(Command("password"))
async def password(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        await message.answer(
            "‚ùå –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ Rombi —ñ —Ç–æ–¥—ñ —Ç–æ–±—ñ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞! –©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–∞—Ç–∏—Å—è, –Ω–∞–ø–∏—à–∏ /signup")
    else:
        lower_case = string.ascii_lowercase
        upper_case = string.ascii_uppercase
        numbers = string.digits
        symbols = string.punctuation

        Use_for = lower_case + upper_case + numbers + symbols
        lenght_for_password = 10
        password = "".join(random.sample(Use_for, lenght_for_password))
        await message.answer("–¢–≤—ñ–π –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å: " + password)


# spam
@router.message(Command("spam"))
async def password(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        await message.answer("‚ùå –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ Rombi —ñ —Ç–æ–¥—ñ —Ç–æ–±—ñ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞! –©–æ–± "
                             "–∑–∞—Ä–µ—î—Å—Ç—Ä—É–∞—Ç–∏—Å—è, –Ω–∞–ø–∏—à–∏ /signup")
    else:
        user_id_to_spam = message.text.replace("/spam ", "")
        print("–°–ø–∞–º–ª—é —É—Å–ø—ñ—à–Ω–æ!")
        while True:
            if user_id_to_spam == "5197139803":
                await message.answer("–Ü–¥–∏ –≤ –¥—É–ø—É, —Ü–µ –º—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫, –π–æ–≥–æ –∑–∞—Å–ø–∞–º–∏—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞!")
                break
            await bot.send_message(user_id_to_spam, "Spam üòàüòàüòà")


@router.message(Command("profile"))
async def profile(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        await message.answer(
            "‚ùå –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ Rombi —ñ —Ç–æ–¥—ñ —Ç–æ–±—ñ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞! –©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–∞—Ç–∏—Å—è, "
            "–Ω–∞–ø–∏—à–∏ /signup")
    else:
        user_id_r = cur.execute("SELECT user_id FROM users WHERE user_id=?", (message.from_user.id,))
        user_id = user_id_r.fetchone()[0]
        full_name_r = cur.execute("SELECT full_name FROM users WHERE user_id=?", (message.from_user.id,))
        full_name = full_name_r.fetchone()[0]
        username_r = cur.execute("SELECT username FROM users WHERE user_id=?", (message.from_user.id,))
        username = username_r.fetchone()[0]
        date_r = cur.execute("SELECT date FROM users WHERE user_id=?", (message.from_user.id,))
        date = date_r.fetchone()[0]
        name_r = cur.execute("SELECT name FROM users WHERE user_id=?", (message.from_user.id,))
        name = name_r.fetchone()[0]
        email_r = cur.execute("SELECT email FROM users WHERE user_id=?", (message.from_user.id,))
        email = email_r.fetchone()[0]
        await message.reply(
            f"üë§ –¢–≤–æ—î —ñ–º'—è - {name}\n"
            f"üì§ –¢–≤—ñ–π email - {email}\n"
            f"üÜî –¢–≤—ñ–π ID - {user_id}\n"
            f"üßëüèª‚Äçüíª –¢–≤—ñ–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º - @{username}\n"
            f"ü™™ –¢–≤–æ—î —ñ–º'—è –≤ Telegram - {full_name}\n"
            f"üìÜ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ç—Ä–∞—Ü—ñ—ó - {date}\n")


# signup
@router.message(Command("signup"))
async def signup(message: Message, state: FSMContext):
    await state.set_state(Signup.name)
    await message.answer("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")


@router.message(Signup.name)
async def name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Signup.age)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")


@router.message(Signup.age)
async def age(message: Message, state: FSMContext):
    if message.text.isdigit() and len(message.text) < 2:
        await state.update_data(age=message.text)
        await state.set_state(Signup.email)
        await message.answer(
            "–Ø–∫–∞ —Ç–≤–æ—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ —Å–∫—Ä–∏–Ω—å–∫–∞? –ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ —Ç–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É, —â–æ–± –≤ —Ä–∞–∑—ñ —á–æ–≥–æ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Ç–æ–±–æ—é")
    else:
        await message.answer("–í–∫–∞–∂–∏ —á–∏—Å–ª–æ, –∞ –Ω–µ –±—É–∫–≤—É/–±—É–∫–≤–∏")


@router.message(Signup.email)
async def eemail(message: Message, state: FSMContext):
    email = message.text
    if is_valid_email(email):
        await state.update_data(email=message.text)
        await state.set_state(Signup.email)
        data = await state.get_data()
        await show_summary(message=message, data=data)
    else:
        await message.reply("–¶–µ –Ω–µ–¥—ñ–π—Å–Ω–∞ email-–∞–¥—Ä–µ—Å–∞")
        await state.set_state(state=None)


# info
@router.message(Command("info"))
async def info(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        await message.answer("‚ùå –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ Rombi —ñ —Ç–æ–¥—ñ —Ç–æ–±—ñ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞! –©–æ–± "
                             "–∑–∞—Ä–µ—î—Å—Ç—Ä—É–∞—Ç–∏—Å—è, –Ω–∞–ø–∏—à–∏ /signup")
    else:
        await message.answer(
            "<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> –¶–µ –±–æ—Ç –†–æ–º–±—ñ, —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π –æ–¥–Ω—ñ—î—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ª—é–¥–∏–Ω–æ—é, —è–∫–∞ –¥–æ —Ä–µ—á—ñ –ø—Ä–æ—Ç–∏ —Ä–æ—Å—ñ—ó —ñ –º–µ–Ω—ñ "
            "—Å—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ... –ù—É —ñ —è –≤–∏—Ä—ñ—à–∏–≤ –∑—Ä–æ–±–∏—Ç–∏ —Å–≤–æ–≥–æ Telegram –±–æ—Ç–∞ —ñ –º–µ–Ω—ñ —Å—Ç–∞–ª–æ –≤–µ—Å–µ–ª–æ)). –¢–∞–∫–æ–∂ —è –Ω–∞–¥—ñ—é—Å—è —â–æ –±–æ—Ç "
            "–±—É–¥–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è —ñ –¥–∞–ª—ñ, —Ç–æ–º—É —á–µ–∫–∞–π—Ç–µ –≤–µ—Ä—Å—ñ—ó 3.01. –ê —è –ø—ñ–¥—É –ø–æ—ó–º –≤–∞—Ä–µ–Ω–∏–∫—ñ–≤ —ñ –±—É–¥—É –¥—É–º–∞—Ç–∏ —è–∫ –º–æ–∂–Ω–∞ "
            "–≤–¥–æ—Å–∫–æ–Ω–∞–ª–∏—Ç–∏ –±–æ—Ç–∞üòâ\n\n<b>–¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n–¢–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: soon\n–ú–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: Python, "
            "Aiogram 3\n–í–µ—Ä—Å—ñ—è –±–æ—Ç—É: 2.103\n\n<b>–ö–æ–º–∞–¥–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∏:</b>\n–ì–æ–ª–æ–≤–Ω–∏–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫: @Videodimaa\n–î–∏–∑–∞–π–Ω–µ—Ä "
            "–∞–≤–∞—Ç–∞—Ä—É: @Videodimaa\n–î–∏–∑–∞–π–Ω–µ—Ä/–æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: @Videodimaa")


# renewal
@router.message(Command("renewal"))
async def send_welcome(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        await message.answer(
            "‚ùå –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ Rombi —ñ —Ç–æ–¥—ñ —Ç–æ–±—ñ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞! –©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–∞—Ç–∏—Å—è, –Ω–∞–ø–∏—à–∏ /signup")
    else:
        await message.reply(
            f"<b>–°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—å:</b>\n\n<b>1. –î–≤—ñ –Ω–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥–∏</b><b>–¢–Ü–õ–¨–ö–ò</b><b>–¥–ª—è "
            f"–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤</b>\n<code>/channel_id</code> - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è id –∫–∞–Ω–∞–ª—É\n<code>/id</code> - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è id "
            f"–∞–∫–∞—É–Ω—Ç—É\n<code>/ping</code> - –º–æ–∂–Ω–∞ –≤–∑–Ω–∞—Ç–∏ —Å–≤—ñ–π –ø—ñ–Ω–≥\n<code>/spam</code> - –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 500 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—å "
            f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\n<b>–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –æ—Ç—Ä–∏–º—Ç–∞–∏ –∑–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–∏—à–∏ —Å—é–¥–∏ @Videodimaa </b>\n\n<b>2. –¢–µ–ø–µ—Ä –≤ "
            f"–†–æ–º–±—ñ –ø—ñ–¥—Ç—Ä–∏–º—É—î <code>–º–æ–Ω–æ—à–∏—Ä–∏–π</code> —Ç–µ–∫—Å—Ç</b>\n\n<b>3. –ó'—è–≤–∏–ª–æ—Å—è 3 –Ω–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è "
            f"–º–æ–¥–µ—Ä–∞—Ü—ñ—ó!</b>\n<b>–ê —Å–∞–º–µ:</b>\n<b><code>/ban</code> - –º–æ–∂–Ω–∞ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ "
            f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n<b><code>/mute</code> - –º–æ–∂–Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É "
            f"–≥–æ–∏–¥–Ω—É</b>\n<b>/<code>unmute</code> - –º–æ–∂–Ω–∞ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ä–∞–Ω—ñ—à–µ –≥–æ–¥–∏–Ω–∏</b>\n\n<b>4. –¢–µ–ø–µ—Ä —É "
            f"–†–æ–º–±—ñ —î –†–ü(–º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —è–∫—É—Å—å –º—ñ–Ω—ñ –≥—Ä—É) –∫–æ–º–∞–Ω–¥–∏!</b>\n<b>–ê —Å–∞–º–µ:</b>\n<b>–í–∏—Å—Ç—Ä—ñ–ª–∏—Ç–∏</b>\n<b>–î–∞—Ç–∏ "
            f"–ø–µ–Ω–¥–∏–∫–∞</b>\n<b>–î–∞—Ç–∏ –ø'—è—Ç—å</b>\n\n–û—Å—å —Ç–∞–∫ –†–æ–º–±—ñ –∑—É—Å—Ç—Ä—ñ–≤ <b>2023</b> —Ä—ñ–∫!")


# how_admin
@router.message(Command("how_admin"))
async def send_welcome(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        await message.answer(
            "‚ùå –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ Rombi —ñ —Ç–æ–¥—ñ —Ç–æ–±—ñ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞! –©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–∞—Ç–∏—Å—è, –Ω–∞–ø–∏—à–∏ /signup")
    else:
        await message.reply(
            f"{message.from_user.full_name}, –∑–∞–ø–æ–≤–Ω–∏ —Ü—é <a href='https://docs.google.com/forms/d"
            f"/1tSjH6Yex9VAHtIZIvcLXJ2frYWNQw7VrouterYrZIPJ5fBI'>—Ñ–æ—Ä–º—É</a>, —ñ –º–∏ –ø—Ä–∏–π–º–µ–º–æ —Å–≤–æ—î —Ä—ñ—à–µ–Ω–Ω—èüòâ")


# allcfa
@router.message(Command("cmd"))
async def send_welcome(message: Message):
    cur.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    r = cur.fetchone()
    if not r:
        await message.answer(
            "‚ùå –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ Rombi —ñ —Ç–æ–¥—ñ —Ç–æ–±—ñ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞! –©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–∞—Ç–∏—Å—è, –Ω–∞–ø–∏—à–∏ /signup")
    else:
        await message.reply(
            "/start\n/help\n/info\n/renewal\n/how_admin\n/id\n/channel_id\n/password\n/issue\n/send\n–º–∞—Ç—é–∫\n–°–ª–æ–≤–æ\n–æ–∫—É–ø–∞–Ω—Ç\n–ø—É—Ç—ñ–Ω\n–ó–µ–ª–µ–Ω—Å—å–∫–∏–π\n–º–æ—Å–∫–≤a\n—Ä–æ–º–±—ñ, —â–æ —Ç–∞–∫–µ coding?\n—Ä–æ–º–±—ñ"
            "–†–æ–º–±—ñ, —Ç–∏ –¥–µ?\n—Ä–æ–º–±\n–∞ —Ç–∏ —Ö—Ç–æ?\n—Ö—Ç–æ —Ç—É—Ç –∫—Ä–∞—Å–∞–≤–∞?)")


async def show_summary(message: Message, data: Dict[str, Any]):
    name = data["name"]
    age = data["age"]
    data["email"] = message.text
    email = data["email"]
    text = f'{name}, {age}, {email}'
    date = datetime.now(pytz.timezone('Europe/Kiev')).strftime("%d.%m.%Y %H:%M")
    print("–©–æ –≤–∫–∞–∑–∞–≤ —é–∑–µ—Ä", text)
    upd_text = f'{message.from_user.id}, {message.from_user.username}, {message.from_user.full_name}'
    print("–©–æ –≤–∫–∞–∑–∞–≤ —é–∑–µ—Ä + —Ç–æ, —â–æ –±–æ—Ç –≤–∏—è—Å–Ω–∏–≤ ", text, upd_text)
    cur.execute('INSERT INTO users (user_id, username, full_name, name, age, email, date)'
                'VALUES (?, ?, ?, ?, ?, ?, ?)',
                (message.from_user.id, message.from_user.username, message.from_user.full_name, name, age, email, date))
    base.commit()
    # await message.answer(text=text)
    await message.answer(
        "ü•≥ –í—ñ—Ç–∞—é! –¢–∏ —É—Å–ø—à—ñ–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è –≤ Rombi!!!\n–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤—Ç–∏—Å—è —Å–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å, –Ω–∞–ø–∏—à–∏ - /profile")
